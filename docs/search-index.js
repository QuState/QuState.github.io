var searchIndex = new Map(JSON.parse('[\
["spinoza",{"doc":"The rust core of Spinoza","t":"CCCCCCCCCCGPPPFFFPNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNONNNONONNNONNNNNNNNNNNNNNNNNNNNNNOOFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONNNNNNNNNNNSSSSJFFNNNNNNNNNNNNNNNNONNNNHNONNHOHNNNNNNNNNNNHPGPPPPPPPPPPPPHNNHHHNNNNNNNNNHNNHNNNNFISSNNNNNNNNONNHHONNNNNHHHFHNNNNNNNNNNNONNNNNNNNNOHHHHHHH","n":["circuit","config","consts","core","gates","math","measurement","openqasm","unitaries","utils","Controls","Mixed","None","Ones","QuantumCircuit","QuantumRegister","QuantumTransformation","Single","add","append","append_u","bit_flip_noise","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c_append","c_append_u","c_unitary","ccx","ch","clone","clone","clone","clone_into","clone_into","clone_into","controls","cp","crx","cry","crz","cu","cx","cy","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","execute","from","from","from","from","gate","get_shift","get_statevector","h","index","init","init","init","init","into","into","into","into","inverse","iqft","len","mc_append","measure","new","new","p","quantum_registers_info","rx","ry","rz","state","swap","target","to_owned","to_owned","to_owned","transformations","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","u","unitary","update_shift","vzip","vzip","vzip","vzip","x","y","z","controls","zeros","Config","QSArgs","augment_args","augment_args_for_update","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","command","command_for_update","deref","deref","deref_mut","deref_mut","drop","drop","fmt","from","from","from_arg_matches","from_arg_matches_mut","from_cli","global","group_id","init","init","into","into","print","qubits","threads","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip","vzip","H","X","Y","Z","CONFIG","Reservoir","State","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","fmt","from","from","get_outcome_count","imags","init","init","into","into","iqft","len","n","new","new","qubit_expectation_value","reals","reservoir_sampling","sampling","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","xyz_expectation_value","BitFlipNoise","Gate","H","M","P","RX","RY","RZ","SWAP","U","Unitary","X","Y","Z","apply","borrow","borrow_mut","c_apply","c_transform_u","cc_apply","clone","clone_into","deref","deref_mut","drop","from","init","into","inverse","mc_apply","to_matrix","to_owned","transform_u","try_from","try_into","type_id","vzip","Amplitude","Float","PI","SQRT_ONE_HALF","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","from","im","init","into","modulus","pow2f","re","to_owned","try_from","try_into","type_id","vzip","measure_qubit","load","loads","Unitary","apply_unitary","borrow","borrow_mut","clone","clone_into","conj_t","deref","deref_mut","drop","fmt","from","from_single_qubit_gate","height","init","into","multiply","to_owned","to_string","try_from","try_into","type_id","vzip","width","assert_float_closeness","gen_random_state","mat_mul_2x2","padded_bin","pretty_print_int","swap","to_table"],"q":[[0,"spinoza"],[10,"spinoza::circuit"],[120,"spinoza::circuit::Controls"],[122,"spinoza::config"],[166,"spinoza::consts"],[170,"spinoza::core"],[214,"spinoza::gates"],[251,"spinoza::math"],[274,"spinoza::measurement"],[275,"spinoza::openqasm"],[277,"spinoza::unitaries"],[301,"spinoza::utils"],[308,"core::result"],[309,"core::any"],[310,"clap_builder::builder::command"],[311,"core::fmt"],[312,"core::fmt"],[313,"clap_builder"],[314,"clap_builder::util::id"],[315,"core::option"],[316,"std::collections::hash::map"],[317,"alloc::string"],[318,"alloc::vec"],[319,"std::collections::hash::set"],[320,"std::path"]],"d":["Abstractions for a quantum circuit","Configuration options for running spinoza","Consts for Quantum State Simulation, such as the Pauli …","Abstractions for representing a Quantum State","Abstractions for quantum logic gates","An assortment of mathematical structures, functions, and …","Functionality for measurement","Functionality for creating a QuantumCircuit from an …","Functionality for applying large 2^n * 2^n matrices to the …","An assortment of utility functions for visualizing, …","Control qubits","Mixed Controls","No controls","Multiple Controls","A model of a Quantum circuit See …","See https://en.wikipedia.org/wiki/Quantum_register","QuantumTransformation to be applied to the State","Single Control","Add a given <code>QuantumTransformation</code> to the list of …","Append a QuantumCircuit to the given register of <em>this</em> …","Append a <code>Unitary</code> to a <code>QuantumRegister</code>","Add the bit flip noise gate for a given target qubit, …","","","","","","","","","Append a QuantumCircuit to the given register of <em>this</em> …","Append a controlled <code>Unitary</code> to a <code>QuantumRegister</code>","Add a controlled Unitary for a given target qubit to the …","Add the CCX gate for a given target qubit and two control …","Add a controlled Hadamard gate for a given target qubit …","","","","","","","The control qubits","Add the Controlled Phase (CP) gate for a given target …","Add the Controlled Rx gate for a given target qubit and a …","Add CRy gate for a given target qubit and a given control …","Add the Controlled Rz gate for a given target qubit and a …","Add the Controlled U gate for a given target qubit and a …","Add the CX gate for a given target qubit and control qubit …","Add the Controlled Y gate for a given target qubit and a …","","","","","","","","","","","","","Run the list of transformations against the State","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The quantum logic gate","Get the shift size for this register","Get a reference to the Quantum State","Add the Hadamard (H) gate for a given target qubit to the …","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Invert this circuit","Add all transformations for an inverse Quantum Fourier …","The length of the quantum register","Append a QuantumCircuit to the given register of <em>this</em> …","Measure a single qubit","Create a new QuantumCircuit from multiple QuantumRegisters","Create a new QuantumRegister","Add Phase (P) gate for a given target qubit to the list of …","The sizes of the provided quantum registers","Add the Rx gate for a given target to the list of …","Add Ry gate for a given target qubit to the list of …","Add Rz gate for a given target qubit to the list of …","The Quantum State to which transformations are applied","Add a SWAP gate that swaps two qubits","The target qubits","","","","The list of operations to be applied to the State","","","","","","","","","","","","","Add the U gate for a given target to the list of …","Add a Unitary for a given target qubit to the list of …","Update quantum register by shift","","","","","Add the X gate for a given target to the list of …","Add the Y gate for a given target to the list of …","Add Z gate for a given target qubit to the list of …","Control qubits","Zeroes","Config for simulations that are run using the CLI","Representation of the CLI args","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Convert the provided CLI args and turn it into a Config","Get or init the global Config. The default","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether or not to print the State represented as a table.","The number of qubits that will make up the State.  State …","The number of threads to distribute the workload. <code>u32</code> is …","","","","","","","","","","","","The 2 x 2 matrix representation of the Hadamard gate","The 2 x 2 matrix representation of the X gate","The 2 x 2 matrix representation of the Y gate","The 2 x 2 matrix representation of the Z gate","Reference to the Config for user passed config args","Reservoir for sampling See …","Representation of a Quantum State. Amplitudes are split …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Create a histogram of the counts for each outcome","The imaginary components of the state.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Inverse Quantum Fourier transform","Get the size of the state vector. Size of the state should …","The number of qubits represented by the state.","Create a new reservoir for sampling","Create a new State. The state will always be of size 2^{n},","Compute the expectation value of a qubit measurement.","The real components of the state.","Convenience function for running reservoir sampling","Run the sampling based on the given State","","","","","","","","","","","Compute the expectation value of certain observables …","A gate to simulate a bit flip based on the provided …","Quantum Logic Gates See …","Hadamard gate. See …","Measurement ‘gate’","Phase shift gate. See …","Rx gate for rotation about the x-axis. See …","Ry gate for rotation about the y-axis. See …","Rz gate for rotation about the z-axis. See …","Swap gate swaps two qubits. See …","General single qubit rotation. See …","A Unitary matrix. See …","The Pauli-X gate is the quantum equivalent of the NOT gate …","See …","See …","Single Target, No Controls","","","Single Control, Single Target","Apply a controlled Unitary to the <code>State</code>","Two Controls, Single Target","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Return the inverted gate","Multiple Controls, Single Target","Return the 2 x 2 matrix representation of the gate","","Apply a Unitary to the <code>State</code>","","","","","An amplitude that makes up a Quantum State","The type of floating point number to use for amplitudes","An alias for …","An alias for …","","","","","","","","Returns the argument unchanged.","imaginary component","","Calls <code>U::from(self)</code>.","The absolute value of a complex number See …","Compute 2^n and convert it to a float","real component","","","","","","Single qubit measurement","Parse an OpenQASM 2.0 program file, and convert it into a …","Parse an OpenQASM 2.0 program in <code>str</code> format, and convert …","A representation of a Unitary Matrix","Applies a unitary matrix to the Quantum State Vector","","","","","Return the conjugate transpose of this <code>Unitary</code>, in-place","","","","","Returns the argument unchanged.","Construct a Unitary from a single qubit gate","The number of rows in the matrix","","Calls <code>U::from(self)</code>.","Multiply this unitary matrix by another unitary matrix","","","","","","","The number of columns in the matrix","Asserts that two floating point numbers are approximately …","Generates a random quantum state","Utility function for multiplying two 2 x 2 gates","Convert a <code>usize</code> to its binary expansion, but padded with 0…","Formats an unsigned, 128 bit integer with commas, as a …","Swap using controlled X gates.","Display the <code>State</code> as a table"],"i":[0,0,0,0,0,0,0,0,0,0,0,8,8,8,0,0,0,8,1,1,1,1,1,4,8,2,1,4,8,2,1,1,1,1,1,4,8,2,4,8,2,2,1,1,1,1,1,1,1,1,4,8,2,1,4,8,2,1,4,8,2,1,1,4,8,2,2,4,1,1,4,1,4,8,2,1,4,8,2,1,1,4,1,1,1,4,1,1,1,1,1,1,1,2,4,8,2,1,1,4,8,2,1,4,8,2,1,4,8,2,1,1,4,1,4,8,2,1,1,1,36,36,0,0,18,18,14,18,14,18,14,14,18,18,14,18,14,18,14,18,14,14,18,18,18,14,14,18,14,18,14,18,14,14,14,14,14,18,14,18,14,18,18,18,14,18,0,0,0,0,0,0,0,22,9,22,9,9,9,22,9,22,9,22,9,9,22,9,22,9,22,9,22,9,0,9,9,22,9,0,9,0,22,9,9,22,9,22,9,22,9,22,9,0,27,0,27,27,27,27,27,27,27,27,27,27,27,27,0,27,27,0,0,0,27,27,27,27,27,27,27,27,27,0,27,27,0,27,27,27,27,0,0,0,0,29,29,29,29,29,29,29,29,29,29,29,0,0,29,29,29,29,29,29,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],3],[[1,1,4],3],[[1,5,4],3],[[1,6,7],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,1,7,4],3],[[1,5,7,4],3],[[1,5,7,7],3],[[1,7,7,7],3],[[1,7,7],3],[4,4],[8,8],[2,2],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,[[1,6,7,7],3],[[1,6,7,7],3],[[1,6,7,7],3],[[1,6,7,7],3],[[1,6,6,6,7,7],3],[[1,7,7],3],[[1,7,7],3],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,3],[7,3],[7,3],[7,3],[1,3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[4,7],[1,9],[[1,7],3],[[4,7],-1,[]],[[],7],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,3],[[1,[10,[7]]],3],[4,7],[[1,1,[10,[7]],4],3],[[1,7],3],[[[10,[4]]],1],[7,4],[[1,6,7],3],0,[[1,6,7],3],[[1,6,7],3],[[1,6,7],3],0,[[1,7,7],3],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[[1,6,6,6,7],3],[[1,5,7],3],[[4,7],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,7],3],[[1,7],3],[[1,7],3],0,0,0,0,[13,13],[13,13],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[14,14],[[-1,-2],3,[],[]],[[],13],[[],13],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,3],[7,3],[[14,15],16],[-1,-1,[]],[-1,-1,[]],[17,[[11,[18,19]]]],[17,[[11,[18,19]]]],[18,14],[[],14],[[],[[21,[20]]]],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[[18,17],[[11,[3,19]]]],[[18,17],[[11,[3,19]]]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[9,9],[[-1,-2],3,[],[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,3],[7,3],[[9,15],16],[-1,-1,[]],[-1,-1,[]],[22,[[23,[7,7]]]],0,[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[[9,[10,[7]]],3],[9,7],0,[7,22],[7,9],[[9,7],6],0,[[9,7,7],22],[[22,[10,[6]],[10,[6]],7],3],[-1,-2,[],[]],[-1,24,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[25,9,[10,[7]]],[[26,[6]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[27,9,7],3],[-1,-2,[],[]],[-1,-2,[],[]],[[27,9,7,7],3],[[9,5,7,7],3],[[27,9,7,7,7],3],[27,27],[[-1,-2],3,[],[]],[7,-1,[]],[7,-1,[]],[7,3],[-1,-1,[]],[[],7],[-1,-2,[],[]],[27,27],[[27,9,[10,[7]],[21,[[28,[7]]]],7],3],[27,[[30,[29]]]],[-1,-2,[],[]],[[9,5,7],3],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[29,29],[[-1,-2],3,[],[]],[7,-1,[]],[7,-1,[]],[7,3],[-1,-1,[]],0,[[],7],[-1,-2,[],[]],[[6,6],6],[7,6],0,[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,-2,[],[]],[[9,7,31,[21,[32]]],32],[33,1],[34,1],0,[[9,5],9],[-1,-2,[],[]],[-1,-2,[],[]],[5,5],[[-1,-2],3,[],[]],[5,3],[7,-1,[]],[7,-1,[]],[7,3],[[5,15],16],[-1,-1,[]],[[9,27,7],5],0,[[],7],[-1,-2,[],[]],[[5,5],5],[-1,-2,[],[]],[-1,24,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,-2,[],[]],0,[[6,6,6],3],[7,9],[[[30,[29]],[30,[29]]],[[30,[29]]]],[[7,7],24],[35,24],[[9,7,7],3],[9,24]],"c":[],"p":[[5,"QuantumCircuit",10],[5,"QuantumTransformation",10],[1,"tuple"],[5,"QuantumRegister",10],[5,"Unitary",277],[8,"Float",251],[1,"usize"],[6,"Controls",10],[5,"State",170],[1,"slice"],[6,"Result",308],[5,"TypeId",309],[5,"Command",310],[5,"Config",122],[5,"Formatter",311],[8,"Result",311],[5,"ArgMatches",312],[5,"QSArgs",122],[8,"Error",313],[5,"Id",314],[6,"Option",315],[5,"Reservoir",170],[5,"HashMap",316],[5,"String",317],[1,"char"],[5,"Vec",318],[6,"Gate",214],[5,"HashSet",319],[5,"Amplitude",251],[1,"array"],[1,"bool"],[1,"u8"],[5,"Path",320],[1,"str"],[1,"u128"],[15,"Mixed",120]],"b":[]}],\
["spynoza",{"doc":"","t":"FFFFFNNONNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNHNHNNNHNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNN","n":["PyQuantumTransformation","PyState","QuantumCircuit","QuantumRegister","QuantumTransformation","add","append","arg","arguments","arguments","arguments","arguments","arguments","bit_flip_noise","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c_append","ccx","ch","clone","clone","clone","clone_into","clone_into","clone_into","controls","cp","crx","cry","crz","cu","cx","cy","data","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","doc","doc","doc","doc","doc","drop","drop","drop","drop","drop","execute","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","from","from","from","from","from","from","get_samples","h","init","init","init","init","init","into","into","into","into","into","into_py","into_py","into_py","into_py","into_py","inverse","iqft","items_iter","items_iter","items_iter","items_iter","items_iter","lazy_type_object","lazy_type_object","lazy_type_object","lazy_type_object","lazy_type_object","mc_append","measure","name","new","new","p","qubit_expectation_value","register_sizes","run","rx","ry","rz","show_table","state_vector","swap","target","to_owned","to_owned","to_owned","transformations","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_object_raw","type_object_raw","type_object_raw","type_object_raw","type_object_raw","u","vzip","vzip","vzip","vzip","vzip","x","xyz_expectation_value","y","z"],"q":[[0,"spynoza"],[161,"pyo3::marker"],[162,"pyo3::types::any"],[163,"pyo3::instance"],[164,"spinoza::math"],[165,"core::ffi::c_str"],[166,"pyo3::err"],[167,"pyo3::err"],[168,"spinoza::circuit"],[169,"std::collections::hash::map"],[170,"pyo3::instance"],[171,"pyo3::impl_::pyclass"],[172,"pyo3::impl_::pyclass::lazy_type_object"],[173,"pyo3::types::tuple"],[174,"alloc::string"],[175,"core::any"],[176,"pyo3_ffi::object"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,1,1,10,13,4,10,2,1,1,13,4,10,2,1,13,4,10,2,1,1,1,1,4,10,2,4,10,2,10,1,1,1,1,1,1,1,13,13,4,10,2,1,13,4,10,2,1,13,4,10,2,1,13,4,10,2,1,1,13,13,4,4,4,10,10,10,2,2,2,1,1,13,4,10,10,2,1,0,1,13,4,10,2,1,13,4,10,2,1,13,4,10,2,1,1,1,13,4,10,2,1,13,4,10,2,1,1,1,10,4,1,1,0,1,0,1,1,1,0,1,1,10,4,10,2,1,13,4,10,2,1,13,4,10,2,1,13,4,10,2,1,13,4,10,2,1,1,13,4,10,2,1,1,0,1,1],"f":[0,0,0,0,0,[[1,2],3],[[1,1,4],3],0,[[-1,5],[[7,[6]]],[]],[[-1,5],[[7,[6]]],[]],[[-1,5],[[7,[6]]],[]],[[-1,5],[[7,[6]]],[]],[[-1,5],[[7,[6]]],[]],[[1,8,9],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,1,9,4],3],[[1,9,9,9],3],[[1,9,9],3],[4,4],[10,10],[2,2],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,[[1,8,9,9],3],[[1,8,9,9],3],[[1,8,9,9],3],[[1,8,9,9],3],[[1,8,8,8,9,9],3],[[1,9,9],3],[[1,9,9],3],0,[9,-1,[]],[9,-1,[]],[9,-1,[]],[9,-1,[]],[9,-1,[]],[9,-1,[]],[9,-1,[]],[9,-1,[]],[9,-1,[]],[9,-1,[]],[5,[[12,[11]]]],[5,[[12,[11]]]],[5,[[12,[11]]]],[5,[[12,[11]]]],[5,[[12,[11]]]],[9,3],[9,3],[9,3],[9,3],[9,3],[1,3],[[6,-1],[[12,[13]]],[]],[[6,-1],[[12,[13]]],[]],[[6,-1],[[12,[4]]],[]],[[6,-1],[[12,[4]]],[]],[6,[[15,[-1,14]]],[]],[[6,-1],[[12,[10]]],[]],[6,[[15,[-1,14]]],[]],[[6,-1],[[12,[10]]],[]],[6,[[15,[-1,14]]],[]],[[6,-1],[[12,[2]]],[]],[[6,-1],[[12,[2]]],[]],[[6,-1],[[12,[1]]],[]],[[6,-1],[[12,[1]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[16,10],[-1,-1,[]],[-1,-1,[]],[[13,9,9],[[17,[9,9]]]],[[1,9],3],[[],9],[[],9],[[],9],[[],9],[[],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[13,5],18],[[4,5],18],[[10,5],18],[[2,5],18],[[1,5],18],[1,3],[[1,[19,[9]]],3],[[],20],[[],20],[[],20],[[],20],[[],20],[[],[[21,[13]]]],[[],[[21,[4]]]],[[],[[21,[10]]]],[[],[[21,[2]]]],[[],[[21,[1]]]],[[1,1,[19,[9]],4],3],[[1,9],3],0,[9,4],[22,1],[[1,8,9],3],[[13,9],8],[1,[[19,[9]]]],[1,[[12,[13]]]],[[1,8,9],3],[[1,8,9],3],[[1,8,9],3],[13,23],[1,[[12,[13]]]],[[1,9,9],3],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,[[19,[10]]]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[5,25],[5,25],[5,25],[5,25],[5,25],[[1,8,8,8,9],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,9],3],[[26,13,[19,[9]]],[[19,[8]]]],[[1,9],3],[[1,9],3]],"c":[],"p":[[5,"QuantumCircuit",0],[5,"QuantumTransformation",0],[1,"tuple"],[5,"QuantumRegister",0],[5,"Python",161],[5,"PyAny",162],[5,"Py",163],[8,"Float",164],[1,"usize"],[5,"PyQuantumTransformation",0],[5,"CStr",165],[8,"PyResult",166],[5,"PyState",0],[5,"PyErr",166],[6,"Result",167],[5,"QuantumTransformation",168],[5,"HashMap",169],[8,"PyObject",163],[5,"Vec",170],[5,"PyClassItemsIter",171],[5,"LazyTypeObject",172],[5,"PyTuple",173],[5,"String",174],[5,"TypeId",175],[5,"PyTypeObject",176],[1,"char"]],"b":[[63,"impl-PyFunctionArgument%3C\'a,+\'py%3E-for-%26mut+PyState"],[64,"impl-PyFunctionArgument%3C\'a,+\'py%3E-for-%26PyState"],[65,"impl-PyFunctionArgument%3C\'a,+\'py%3E-for-%26QuantumRegister"],[66,"impl-PyFunctionArgument%3C\'a,+\'py%3E-for-%26mut+QuantumRegister"],[68,"impl-PyFunctionArgument%3C\'a,+\'py%3E-for-%26PyQuantumTransformation"],[70,"impl-PyFunctionArgument%3C\'a,+\'py%3E-for-%26mut+PyQuantumTransformation"],[72,"impl-PyFunctionArgument%3C\'a,+\'py%3E-for-%26QuantumTransformation"],[73,"impl-PyFunctionArgument%3C\'a,+\'py%3E-for-%26mut+QuantumTransformation"],[74,"impl-PyFunctionArgument%3C\'a,+\'py%3E-for-%26QuantumCircuit"],[75,"impl-PyFunctionArgument%3C\'a,+\'py%3E-for-%26mut+QuantumCircuit"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
